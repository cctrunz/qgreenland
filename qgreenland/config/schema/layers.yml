list(include('layer'))

---
# TODO: Consider renaming file_type to "output_file_type" or something --
# currently this is used when adding layers to the project file, so we should
# consider this as output_file_type and use a new key for source file type.

layer:
  # Used for unique identification, e.g. config, filenames.
  id: str()
  # The layer name in QGIS.
  title: str()
  # descriptive text
  description: str(required=False)

  # Is this layer initially "checked" as visible in QGIS?
  visible: bool()
  # The fully-qualified QGIS group the layer should be placed in, e.g.
  # 'Group/Subgroup/Subsubgroup'
  group_path: str()
  # The name of a style (represented as .qml file in `assets/styles`). Should
  # NOT include .qml file extension
  style: str(required=False)
  boundary: enum('background', 'data', required=False)

  # Reference to a data source in datasets.yml (`{dataset_id}.{source_id}`)
  data_source: str()
  # The index of a task enumerated in qgreenland.tasks.layers.ingest_tasks
  # TODO: Validate that `ingest_task` is member of INGEST_TASKS
  ingest_task: str()
  ingest_task_kwargs: map(required=False)
  # The file extension, e.g. '.shp'
  file_type: str()
  data_type: enum('vector', 'raster')
  # Sometimes, the source data may not come with projection metadata, or the
  # metadta may be wrong. Override the layer projection with this key. E.g.,
  # `EPSG:3321`.
  override_source_projection: str(required=False)

  decompress_kwargs: include('decompress_kwargs', required=False)
  overviews_kwargs: include('overviews_kwargs', required=False)
  warp_kwargs: include('warp_kwargs', required=False)
  ogr2ogr_kwargs: include('ogr2ogr_kwargs', required=False)
  gdal_calc_kwargs: include('gdal_calc_kwargs', required=False)

---
  gdal_calc_kwargs:
    calc: str(required=True)

---
ogr2ogr_kwargs:
  # https://gdal.org/programs/ogr2ogr.html
  input_filename: str(required=False)
  clipdst: str(required=False)
  nlt: str(required=False)  # Make required? Ehh... Maybe...
  s_srs: str(required=False)
  t_srs: str(required=False)
  segmentize: int(required=False)
  sql: str(required=False)
  makevalid: str(required=False)

---
decompress_kwargs:
  # Explicit files to extract from the zip/rar
  extract_files: list(str())

---
overviews_kwargs:
  # Keyword arguments to rasterio `dataset.build_overviews()` method
  overview_levels: list(int())
  resampling_method: str()

---
warp_kwargs:
  # Keyword arguments to gdal.Warp method
  xRes: int(required=False)
  yRes: int(required=False)
  warpOptions: list(str(), required=False)
  resampleAlg: str(required=False)
  # TODO: Pick _one_ interface for supplying/overriding source projections for
  #       rasters and vectors
  srcSRS: str(required=False)
  dstNodata: num(required=False)
